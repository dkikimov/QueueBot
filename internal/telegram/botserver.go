package telegram

import (
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"QueueBot/internal/logger"
	"QueueBot/internal/steps"
)

const CreateQueueCommand = "create"
const StartCommand = "start"

const CreateQueueMessage = "–û–∫–µ–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —ç—Ç–∞ –æ—á–µ—Ä–µ–¥—å"
const HelloMessage = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π. \n–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /create"
const ForwardQueueToMessage = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–≤–æ—é '–æ—á–µ—Ä–µ–¥—å'"

const QueueDescription = "–í –æ—á–µ—Ä–µ–¥–∏ —Å–æ—Å—Ç–æ—è—Ç:"

const EndedQueue = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–Ω–∞—á–∏—Ç –∏ –æ—á–µ—Ä–µ–¥—å —Ç–æ–∂–µ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
const FinishedQueue = "'–û—á–µ—Ä–µ–¥—å' –æ–∫–æ–Ω—á–µ–Ω–∞ üéâ"

const ActionCompleted = "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
const ActionError = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

const CreateQueue = "–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"

const LogInOurOutButton = "–î–æ–±–∞–≤–∏—Ç—å—Å—è/–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
const ForwardQueueButton = "–ü–µ—Ä–µ—Å–ª–∞—Ç—å '–æ—á–µ—Ä–µ–¥—å'"

const StartQueueButton = "–°—Ç–∞—Ä—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏"
const StartQueueShuffleButton = "–°—Ç–∞—Ä—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"

const NextButton = "–°–ª–µ–¥—É—é—â–∏–π"
const GoToMenuButton = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"
const FinishQueueButton = "–ó–∞–∫–æ–Ω—á–∏—Ç—å"

const LogInOurOutData = "log_in_our_out"
const StartQueueData = "start_queue"
const StartQueueShuffleData = "start_queue_shuffle"
const NextData = "next_user"
const GoToMenuData = "go_to_menu"
const FinishQueueData = "finish_queue"

type BotServer struct {
	bot *Bot
}

func NewBotServer(bot *Bot) *BotServer {
	return &BotServer{bot: bot}
}

func (s BotServer) Listen(config tgbotapi.UpdateConfig, errChan chan<- error) {
	updates := s.bot.TgBot.GetUpdatesChan(config)
	logger.Printf("Bot started")

	for update := range updates {
		switch {
		case update.Message != nil:
			go s.HandleMessage(update.Message, errChan)
		case update.CallbackQuery != nil:
			go s.HandleCallbackQuery(update.CallbackQuery, errChan)
		case update.InlineQuery != nil:
			go s.HandleInlineQuery(update.InlineQuery, errChan)
		case update.ChosenInlineResult != nil:
			go s.HandleChosenInlineResult(update.ChosenInlineResult, errChan)
		}
	}
}

func (s BotServer) HandleMessage(message *tgbotapi.Message, errChan chan<- error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞.
	// –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤—É—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	switch message.Command() {
	case StartCommand:
		if err := s.bot.SendHelloMessage(message); err != nil {
			errChan <- fmt.Errorf("sendHelloMessage error occured: %s", err)
			return
		}
		return
	case CreateQueueCommand:
		if err := s.bot.SendMessageToCreateQueue(message); err != nil {
			errChan <- fmt.Errorf("sendMessageToCreateMessage error occured: %s", err)
			return
		}
		return
	}

	// –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º
	currentStep, err := s.bot.Storage.GetUserCurrentStep(message.From.ID)
	if err != nil {
		errChan <- fmt.Errorf("couldn't get current user step with error: %s", err)
	}

	switch currentStep {
	case steps.Menu:
		if err := s.bot.SendHelloMessage(message); err != nil {
			errChan <- fmt.Errorf("sendHelloMessage error occured: %s", err)
			return
		}
	case steps.EnteringDescription:
		if err := s.bot.SendForwardToMessage(message); err != nil {
			errChan <- fmt.Errorf("sendForwardMessage error occured: %s", err)
			return
		}
	default:
		errChan <- fmt.Errorf("got current step (%v) that is not implemented", currentStep)
	}
}

func (s BotServer) HandleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery, errChan chan<- error) {
	// –°–≤–µ—Ä—è–µ–º—Å—è —Å–æ —Å–∫—Ä—ã—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
	wasError := false
	switch callbackQuery.Data {
	case LogInOurOutData:
		if err := s.bot.LogInOurOut(callbackQuery); err != nil {
			errChan <- fmt.Errorf("couldn't login or logout with error: %s", err)
			wasError = true
		}
	case StartQueueData:
		if err := s.bot.Start(callbackQuery, false); err != nil {
			errChan <- fmt.Errorf("couldn't start queue with error: %s", err)
			wasError = true
		}
	case StartQueueShuffleData:
		if err := s.bot.Start(callbackQuery, true); err != nil {
			errChan <- fmt.Errorf("couldn't start queue with shuffle with error: %s", err)
			wasError = true
		}
	case NextData:
		if err := s.bot.Next(callbackQuery); err != nil {
			errChan <- fmt.Errorf("couldn't go to next person with error: %s", err)
			wasError = true
		}
	case GoToMenuData:
		if err := s.bot.GoToMenu(callbackQuery); err != nil {
			errChan <- fmt.Errorf("couldn't go to menu with error: %s", err)
			wasError = true
		}
	case FinishQueueData:
		if err := s.bot.FinishQueue(callbackQuery); err != nil {
			errChan <- fmt.Errorf("couldn't finish queue with error: %s", err)
			wasError = true
		}
	}

	var callback tgbotapi.CallbackConfig
	if wasError {
		callback = tgbotapi.NewCallback(callbackQuery.ID, ActionError)
	} else {
		callback = tgbotapi.NewCallback(callbackQuery.ID, ActionCompleted)
	}
	if _, err := s.bot.TgBot.Request(callback); err != nil {
		errChan <- fmt.Errorf("couldn't process next_data callback with error: %s", err)
		return
	}
}

func (s BotServer) HandleChosenInlineResult(chosenInlineResult *tgbotapi.ChosenInlineResult, errChan chan<- error) {
	// –û–±—Ä—É–±–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
	if len(chosenInlineResult.Query) > 100 {
		chosenInlineResult.Query = chosenInlineResult.Query[:100]
	}

	if err := s.bot.Create(chosenInlineResult.InlineMessageID, chosenInlineResult.Query); err != nil {
		errChan <- err
	}
}

func (s BotServer) HandleInlineQuery(inlineQuery *tgbotapi.InlineQuery, errChan chan<- error) {
	article := tgbotapi.NewInlineQueryResultArticle(inlineQuery.ID, CreateQueue, fmt.Sprintf("–° –æ–ø–∏—Å–∞–Ω–∏–µ–º: %s", inlineQuery.Query))
	article.InputMessageContent = GetQueueMessageContent(inlineQuery.Query)

	keyboard := GetBeforeStartKeyboard()
	article.ReplyMarkup = &keyboard

	inlineConf := tgbotapi.InlineConfig{
		InlineQueryID: inlineQuery.ID,
		CacheTime:     9999,
		Results:       []interface{}{article},
	}

	_, err := s.bot.TgBot.Request(inlineConf)
	if err != nil {
		errChan <- fmt.Errorf("couldn't handle inline query with error: %s", err)
	}
}
